"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeOptions = void 0;
const react_1 = require("@nrwl/react");
const devkit_1 = require("@nrwl/devkit");
const linter_1 = require("@nrwl/linter");
function normalizeOptions(host, options) {
    const { layoutDirectory, projectDirectory } = (0, devkit_1.extractLayoutDirectory)(options.directory);
    const appDirectory = projectDirectory
        ? `${(0, devkit_1.names)(projectDirectory).fileName}/${(0, devkit_1.names)(options.name).fileName}`
        : (0, devkit_1.names)(options.name).fileName;
    const appsDir = layoutDirectory !== null && layoutDirectory !== void 0 ? layoutDirectory : (0, devkit_1.getWorkspaceLayout)(host).appsDir;
    const appProjectName = appDirectory.replace(new RegExp('/', 'g'), '-');
    const e2eProjectName = `${appProjectName}-e2e`;
    const appProjectRoot = (0, devkit_1.joinPathFragments)(appsDir, appDirectory);
    const e2eProjectRoot = (0, devkit_1.joinPathFragments)(appsDir, `${appDirectory}-e2e`);
    const parsedTags = options.tags
        ? options.tags.split(',').map((s) => s.trim())
        : [];
    const fileName = 'index';
    const styledModule = /^(css|scss|less|styl)$/.test(options.style)
        ? null
        : options.style;
    (0, react_1.assertValidStyle)(options.style);
    return Object.assign(Object.assign({}, options), { name: (0, devkit_1.names)(options.name).fileName, projectName: appProjectName, linter: options.linter || linter_1.Linter.EsLint, unitTestRunner: options.unitTestRunner || 'jest', e2eTestRunner: options.e2eTestRunner || 'cypress', style: options.style || 'css', appProjectRoot,
        e2eProjectRoot,
        e2eProjectName,
        parsedTags,
        fileName,
        styledModule });
}
exports.normalizeOptions = normalizeOptions;
//# sourceMappingURL=normalize-options.js.map