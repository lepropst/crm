"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDefaults = void 0;
const devkit_1 = require("@nrwl/devkit");
function setDefaults(host, options) {
    var _a;
    if (options.skipWorkspaceJson) {
        return;
    }
    const workspace = (0, devkit_1.readWorkspaceConfiguration)(host);
    if (!options.skipDefaultProject && !workspace.defaultProject) {
        workspace.defaultProject = options.projectName;
    }
    workspace.generators = workspace.generators || {};
    workspace.generators['@nrwl/react'] =
        workspace.generators['@nrwl/react'] || {};
    const prev = Object.assign({}, workspace.generators['@nrwl/react']);
    const appDefaults = Object.assign({ style: options.style, linter: options.linter, bundler: options.bundler }, prev.application);
    const componentDefaults = Object.assign({ style: options.style }, prev.component);
    const libDefaults = Object.assign({ style: options.style, linter: options.linter }, prev.library);
    // Future react libs should use same test runner as the app.
    if (options.unitTestRunner === 'vitest') {
        // Note: We don't set bundler: 'vite' for libraries because that means they are buildable.
        (_a = libDefaults.unitTestRunner) !== null && _a !== void 0 ? _a : (libDefaults.unitTestRunner = 'vitest');
    }
    workspace.generators = Object.assign(Object.assign({}, workspace.generators), { '@nrwl/react': Object.assign(Object.assign({}, prev), { application: appDefaults, component: componentDefaults, library: libDefaults }) });
    (0, devkit_1.updateWorkspaceConfiguration)(host, workspace);
}
exports.setDefaults = setDefaults;
//# sourceMappingURL=set-defaults.js.map